#!/bin/bash

# Prompt the user to modify the "type" field in the JSON file
read -p "Do you want to have a CSV file (otherwise simulation)? (yes/no) " modify_type

# Minimum and maximum number of drones
NUMBER_OF_DRONES_MIN=3
NUMBER_OF_DRONES_MAX=14
SOURCE_DIRECTORY="FALCON"

if [ "$modify_type" == "yes" ]; then
    echo "You have chosen to have a CSV file"
    new_type="csv"
else
    echo "You have chosen to run a simulation"
    new_type="play"
fi

# Get the directory where the *.json files are
script_dir="$PWD"
echo "Script directory: $script_dir"
script_dir=$(dirname "$script_dir")
echo "Parent directory: $script_dir"
waypoint_dir="${script_dir}/Dataset/Processed_dataset/drones/trajectories_json_format/processing"

# Loop through each JSON file in the specified directory
for waypoint_file in "$waypoint_dir"/*.json; do
    echo "Processing file: $waypoint_file"

    # Compute the distance travelled using the Python script
    path_python_program="${script_dir}/Tools/calc_the_distance_travelled.py"
    distance=$(python3 "$path_python_program" -w "$waypoint_file")

    if [[ $? -ne 0 ]]; then
        echo "Error: Failed to calculate distance for $waypoint_file"
        continue
    fi

    echo "Total distance travelled: $distance"

    # Calculate the new duration based on the distance
    # new_duration=$(echo "$distance / 8.05" | bc -l) when the value of speed was 8.0
    new_duration=$(echo "$distance / 5.15" | bc -l) # Adjusted for the current speed value
    new_duration=${new_duration%.*}
    echo "New Duration: $new_duration"

    #############################################################################################
    #################################### Delete after the test ############################
    new_duration=$((new_duration - 930))

    #############################################################################################

    # Generate a random flock size within the specified range
    flock_size=$((RANDOM % (NUMBER_OF_DRONES_MAX - NUMBER_OF_DRONES_MIN + 1) + NUMBER_OF_DRONES_MIN))
    echo "New Flock size: $flock_size"

    # Update the configuration file with the new duration and flock size
    config_file="${script_dir}/SimDrone6DOF-V1.0.0/src/drone_sim_6dof/examples/config/flock_personalized_conversion.json"
    new_urdf="${script_dir}/SimDrone6DOF-V1.0.0/src/drone_sim_6dof/examples/drone/pyb/robobee.urdf"
    new_xml="${script_dir}/SimDrone6DOF-V1.0.0/src/drone_sim_6dof/examples/drone/jsb/bebop2.xml"
    new_conf="${script_dir}/SimDrone6DOF-V1.0.0/src/drone_sim_6dof/examples/drone/conf.xml"
    new_output_dir="${script_dir}/Dataset/Processed_dataset/drones/trajectories_csv/"

    # Modify the "type" field in the JSON file based on user input
    jq --argjson new_duration "$new_duration" --argjson new_flock_size "$flock_size" --arg new_urdf "$new_urdf" --arg new_xml "$new_xml" --arg new_conf "$new_conf" --arg new_output_dir "$new_output_dir" --arg new_type "$new_type" '
        .sim.duration_s = $new_duration |
        .sim.drones = $new_flock_size |
        .drone.urdf = $new_urdf |
        .drone.xml = $new_xml |
        .drone.conf = $new_conf |
        .logger.output_dir = $new_output_dir |
        .logger.type = $new_type
    ' "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"

    # Run the simulation
    if [[ -f $waypoint_file ]]; then
        echo "Running simulation for $config_file and $waypoint_file"
        path_run_sim="${script_dir}/SimDrone6DOF-V1.0.0/src/drone_sim_6dof/run_sim.py"
        python3 "$path_run_sim" -c "$config_file" -w "$waypoint_file"

        # Only move and rename the files if the user selected 'csv'
        if [ "$modify_type" == "yes" ]; then
            # Define the source and destination directories for the output files
            source_dir="$new_output_dir"
            destination_dir="${script_dir}/Dataset/Processed_dataset/drones/trajectories_csv/$SOURCE_DIRECTORY"

            # Create the output directory if it doesn't exist
            [ ! -d "$destination_dir" ] && mkdir -p "$destination_dir"

            # Rename and move each CSV file generated by the simulation
            echo " "
            echo "Start moving the file"
            for source_file in "$source_dir"*.csv; do
                destination_file="${waypoint_file##*/}"
                destination_file="${destination_file%.json}_${source_file##*/}"
                if [[ -f $source_file ]]; then
                    mv "$source_file" "$destination_dir/$destination_file"
                    echo "Moved $source_file to $destination_dir and renamed it to $destination_file"
                else
                    echo "Error: Source file $source_file not found."
                fi
            done
        fi
    else
        echo "Warning: Waypoint file $waypoint_file not found."
    fi
done


# #!/bin/bash

# # Prompt the user to modify the "type" field in the JSON file
# read -p "Do you want to have a csv (otherwise simulation) ? (yes/no) " modify_type
# # make the statement cleared to understand the user's choice

# # Minimum and maximum number of drones
# NUMBER_OF_DRONES_MIN=3
# NUMBER_OF_DRONES_MAX=14 # normally 14
# SOURCE_DIRECTORY="FALCON"

# if [ $modify_type == "yes" ]; then
#     echo "You have chosen to have a csv file"
#     new_type="csv"
# else
#     echo "You have chosen to have a simulation"
#     new_type="play"
# fi

# # Get the directory where the *.json files are
# script_dir="$PWD"
# echo "Script directory: $script_dir"
# script_dir=$(dirname "$script_dir")
# echo "Parent directory: $script_dir"
# waypoint_dir="${script_dir}/Dataset/Processed_dataset/drones/trajectories_json_format/processing"

# # Loop through each JSON file in the specified directory
# for waypoint_file in "$waypoint_dir"/*.json; do
#     echo "Processing file: $waypoint_file"

#     # Compute the distance travelled using the Python script
#     path_python_program=$(dirname "$PWD")/Tools/calc_the_distance_travelled.py
#     distance=$(python3 $path_python_program -w "$waypoint_file")

#     if [[ $? -ne 0 ]]; then
#         echo "Error: Failed to calculate distance for $waypoint_file"
#         continue
#     fi

#     echo "Total distance travelled: $distance"


#     # Calculate the new duration based on the distance
#     # new_duration=$(echo "$distance / 8.05" | bc -l) when the value of speed was 8.0
#     new_duration=$(echo "$distance / 5.15" | bc -l) # 23 secondes too long when the value was 5
#     new_duration=${new_duration%.*}
#     echo "New Duration: $new_duration"


#     #############################################################################################
#     #################################### Delete after the test ############################
#     new_duration=$((new_duration - 930))

#     #############################################################################################

#     # Generate a random flock size within the specified range
#     flock_size=$((RANDOM % (NUMBER_OF_DRONES_MAX - NUMBER_OF_DRONES_MIN + 1) + NUMBER_OF_DRONES_MIN))
#     echo "New Flock size: $flock_size"


#     # Update the configuration file with the new duration and flock size
#     config_file=$(dirname "$PWD")/SimDrone6DOF-V1.0.0/src/drone_sim_6dof/examples/config/flock_personalized_conversion.json
#     new_urdf="$(dirname "$PWD")/SimDrone6DOF-V1.0.0/src/drone_sim_6dof/examples/drone/pyb/robobee.urdf"
#     new_xml="$(dirname "$PWD")/SimDrone6DOF-V1.0.0/src/drone_sim_6dof/examples/drone/jsb/bebop2.xml"
#     new_conf="$(dirname "$PWD")/SimDrone6DOF-V1.0.0/src/drone_sim_6dof/examples/drone/conf.xml"
#     new_output_dir="$(dirname "$PWD")/Dataset/Processed_dataset/drones/trajectories_csv/"


#     # Modify the "type" field in the JSON file based on user input
#     jq --argjson new_duration "$new_duration" --argjson new_flock_size "$flock_size" --arg new_urdf "$new_urdf" --arg new_xml "$new_xml" --arg new_conf "$new_conf" --arg new_output_dir "$new_output_dir" --arg new_type "$new_type" '
#         .sim.duration_s = $new_duration |
#         .drone.drones = $new_flock_size |
#         .drone.urdf = $new_urdf |
#         .drone.xml = $new_xml |
#         .drone.conf = $new_conf |
#         .logger.output_dir = $new_output_dir |
#         .logger.type = $new_type
#     ' "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"

#     if [[ -f $waypoint_file ]]; then
#         echo "Running simulation for $config_file and $waypoint_file"
#         path_run_sim=$(dirname "$PWD")/SimDrone6DOF-V1.0.0/src/drone_sim_6dof/run_sim.py
#         python3 $path_run_sim -c "$config_file" -w "$waypoint_file"

#         ## Part of the code that move and rename the output file

#         # Define the source and destination directories for the output files that will be renamed
#         source_dir="$new_output_dir"
#         destination_dir="$(dirname "$PWD")/Dataset/Processed_dataset/drones/trajectories_csv/$SOURCE_DIRECTORY"

#         # Check if the output directory exists
#         if [ ! -d "$destination_dir" ]; then
#             # Create the output directory if it doesn't exist
#             mkdir -p "$destination_dir"
#         fi

#         # Rename and move each CSV file generated by the simulation
#         echo " "
#         echo "Start moving the file"
#         for source_file in "$source_dir"*.csv; do
#             destination_file="${waypoint_file##*/}"
#             destination_file="${destination_file%.json}_${source_file##*/}"
#             if [[ -f $source_file ]]; then
#                 mv "$source_file" "$destination_dir/$destination_file"
#                 echo "Moved $source_file to $destination_dir and renamed it to $destination_file"
#             else
#                 echo "Error: Source file $source_file not found."
#             fi
#         done

#     else
#         echo "Warning: Waypoint file $waypoint_file not found."
#     fi
# done
